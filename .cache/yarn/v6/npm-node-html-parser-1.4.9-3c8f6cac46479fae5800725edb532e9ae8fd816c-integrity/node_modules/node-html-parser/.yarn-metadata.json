{
  "manifest": {
    "name": "node-html-parser",
    "version": "1.4.9",
    "description": "A very fast HTML parser, generating a simplified DOM, with basic element query support.",
    "main": "dist/index.js",
    "module": "dist/esm/index.js",
    "types": "dist/index.d.ts",
    "scripts": {
      "test": "mocha",
      "lint": "eslint ./src/*.ts ./src/**/*.ts",
      "clean": "del-cli ./dist/",
      "ts:cjs": "tsc -m commonjs",
      "ts:amd": "tsc -t es5 -m amd -d false --outFile ./dist/main.js",
      "ts:esm": "tsc -t esnext -m esnext -d false --outDir ./dist/esm/",
      "build": "npm run lint && npm run clean && npm run ts:cjs && npm run ts:amd && npm run ts:esm",
      "dev": "tsc -w & mocha -w ./test/*.js",
      "pretest": "tsc -m commonjs"
    },
    "keywords": [
      "parser",
      "html",
      "nodejs",
      "typescript"
    ],
    "author": {
      "name": "Xiaoyi Shi",
      "email": "ashi009@gmail.com"
    },
    "contributors": [
      {
        "name": "taoqf",
        "email": "tao_qiufeng@126.com"
      }
    ],
    "license": "MIT",
    "dependencies": {
      "he": "1.2.0"
    },
    "devDependencies": {
      "@types/entities": "latest",
      "@types/he": "latest",
      "@types/node": "latest",
      "@typescript-eslint/eslint-plugin": "latest",
      "@typescript-eslint/eslint-plugin-tslint": "latest",
      "@typescript-eslint/parser": "latest",
      "blanket": "latest",
      "del-cli": "latest",
      "eslint": "latest",
      "eslint-config-prettier": "latest",
      "eslint-plugin-import": "latest",
      "high5": "^1.0.0",
      "htmlparser": "^1.7.7",
      "htmlparser-benchmark": "^1.1.3",
      "htmlparser2": "^5.0.0",
      "mocha": "latest",
      "parse5": "^6.0.1",
      "should": "latest",
      "spec": "latest",
      "travis-cov": "latest",
      "typescript": "next"
    },
    "config": {
      "blanket": {
        "pattern": "./dist/index.js",
        "data-cover-never": [
          "node_modules"
        ]
      },
      "travis-cov": {
        "threshold": 70
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/taoqf/node-fast-html-parser.git"
    },
    "bugs": {
      "url": "https://github.com/taoqf/node-fast-html-parser/issues"
    },
    "homepage": "https://github.com/taoqf/node-fast-html-parser",
    "_registry": "npm",
    "_loc": "/home/mihai012/.cache/yarn/v6/npm-node-html-parser-1.4.9-3c8f6cac46479fae5800725edb532e9ae8fd816c-integrity/node_modules/node-html-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# Fast HTML Parser [![NPM version](https://badge.fury.io/js/node-html-parser.png)](http://badge.fury.io/js/node-html-parser) [![Build Status](https://travis-ci.org/taoqf/node-html-parser.svg?branch=master)](https://travis-ci.org/taoqf/node-html-parser)\n\nFast HTML Parser is a _very fast_ HTML parser. Which will generate a simplified\nDOM tree, with basic element query support.\n\nPer the design, it intends to parse massive HTML files in lowest price, thus the\nperformance is the top priority.  For this reason, some malformatted HTML may not\nbe able to parse correctly, but most usual errors are covered (eg. HTML4 style\nno closing `<li>`, `<td>` etc).\n\n## Install\n\n```shell\nnpm install --save node-html-parser\n```\n\n## Performance\n\nFaster than htmlparser2!\n\n```shell\nnode-html-parser:2.02346 ms/file ± 2.21481\nhtmlparser      :26.0810 ms/file ± 171.313\nhtmlparser2     :4.49111 ms/file ± 6.85512\nparse5          :14.8590 ms/file ± 10.9427\nhigh5           :7.71818 ms/file ± 4.88375\n```\n\nTested with [htmlparser-benchmark](https://github.com/AndreasMadsen/htmlparser-benchmark).\n\n## Usage\n\n```ts\nimport { parse } from 'node-html-parser';\n\nconst root = parse('<ul id=\"list\"><li>Hello World</li></ul>');\n\nconsole.log(root.firstChild.structure);\n// ul#list\n//   li\n//     #text\n\nconsole.log(root.querySelector('#list'));\n// { tagName: 'ul',\n//   rawAttrs: 'id=\"list\"',\n//   childNodes:\n//    [ { tagName: 'li',\n//        rawAttrs: '',\n//        childNodes: [Object],\n//        classNames: [] } ],\n//   id: 'list',\n//   classNames: [] }\nconsole.log(root.toString());\n// <ul id=\"list\"><li>Hello World</li></ul>\nroot.set_content('<li>Hello World</li>');\nroot.toString();\t// <li>Hello World</li>\n```\n\n```js\nvar HTMLParser = require('node-html-parser');\n\nvar root = HTMLParser.parse('<ul id=\"list\"><li>Hello World</li></ul>');\n```\n\n## Global Methods\n\n### parse(data[, options])\n\nParse given data, and return root of the generated DOM.\n\n- **data**, data to parse\n- **options**, parse options\n\n  ```js\n  {\n    lowerCaseTagName: false,  // convert tag name to lower case (hurt performance heavily)\n    comment: false            // retrieve comments (hurt performance slightly)\n    blockTextElements: {\n      script: true,\t// keep text content when parsing\n      noscript: true,\t// keep text content when parsing\n      style: true,\t\t// keep text content when parsing\n      pre: true\t\t\t// keep text content when parsing\n    }\n  }\n  ```\n\n## HTMLElement Methods\n\n### HTMLElement#trimRight()\n\nTrim element from right (in block) after seeing pattern in a TextNode.\n\n### HTMLElement#removeWhitespace()\n\nRemove whitespaces in this sub tree.\n\n### HTMLElement#querySelectorAll(selector)\n\nQuery CSS selector to find matching nodes.\n\nNote: only `tagName`, `#id`, `.class` selectors supported. And not behave the\nsame as standard `querySelectorAll()` as it will _stop_ searching sub tree after\nfind a match.\n\n### HTMLElement#querySelector(selector)\n\nQuery CSS Selector to find matching node.\n\n### HTMLElement#appendChild(node)\n\nAppend a child node to childNodes\n\n### HTMLElement#insertAdjacentHTML(where, html)\n\nparses the specified text as HTML and inserts the resulting nodes into the DOM tree at a specified position.\n\n### HTMLElement#setAttribute(key: string, value: string)\n\nSet `value` to `key` attribute.\n\n### HTMLElement#removeAttribute(key: string)\n\nRemove `key` attribute.\n\n### HTMLElement#getAttribute(key: string)\n\nGet `key` attribute.\n\n### HTMLElement#exchangeChild(oldNode: Node, newNode: Node)\n\nExchanges given child with new child.\n\n### HTMLElement#removeChild(node: Node)\n\nRemove child node.\n\n### HTMLElement#toString()\n\nSame as [outerHTML](#htmlelementouterhtml)\n\n### HTMLElement#set_content(content: string | Node | Node[])\n\nSet content. **Notice**: Do not set content of the **root** node.\n\n### HTMLElement#remove()\n\nRemove current element.\n\n## HTMLElement Properties\n\n### HTMLElement#text\n\nGet unescaped text value of current node and its children. Like `innerText`.\n(slow for the first time)\n\n### HTMLElement#rawText\n\nGet escpaed (as-it) text value of current node and its children. May have\n`&amp;` in it. (fast)\n\n### HTMLElement#structuredText\n\nGet structured Text\n\n### HTMLElement#structure\n\nGet DOM structure\n\n### HTMLElement#firstChild\n\nGet first child node\n\n### HTMLElement#lastChild\n\nGet last child node\n\n### HTMLElement#innerHTML\n\nGet innerHTML.\n\n### HTMLElement#outerHTML\n\nGet outerHTML.\n\n### HTMLElement#nextSibling\n\nReturns a reference to the next child node of the current element's parent.\n\n### HTMLElement#nextElementSibling\n\nReturns a reference to the next child element of the current element's parent.\n",
    "licenseText": "Copyright 2019 Tao Qiufeng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-html-parser/-/node-html-parser-1.4.9.tgz#3c8f6cac46479fae5800725edb532e9ae8fd816c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-html-parser/-/node-html-parser-1.4.9.tgz",
    "hash": "3c8f6cac46479fae5800725edb532e9ae8fd816c",
    "integrity": "sha512-UVcirFD1Bn0O+TSmloHeHqZZCxHjvtIeGdVdGMhyZ8/PWlEiZaZ5iJzR189yKZr8p0FXN58BUeC7RHRkf/KYGw==",
    "registry": "npm",
    "packageName": "node-html-parser",
    "cacheIntegrity": "sha512-UVcirFD1Bn0O+TSmloHeHqZZCxHjvtIeGdVdGMhyZ8/PWlEiZaZ5iJzR189yKZr8p0FXN58BUeC7RHRkf/KYGw== sha1-PI9srEZHn65YAHJe21Mumuj9gWw="
  },
  "registry": "npm",
  "hash": "3c8f6cac46479fae5800725edb532e9ae8fd816c"
}