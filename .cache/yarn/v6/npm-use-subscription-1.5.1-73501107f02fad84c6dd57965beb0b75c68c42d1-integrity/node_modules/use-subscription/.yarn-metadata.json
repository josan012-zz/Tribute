{
  "manifest": {
    "name": "use-subscription",
    "description": "Reusable hooks",
    "version": "1.5.1",
    "repository": {
      "type": "git",
      "url": "https://github.com/facebook/react.git",
      "directory": "packages/use-subscription"
    },
    "files": [
      "LICENSE",
      "README.md",
      "build-info.json",
      "index.js",
      "cjs/"
    ],
    "license": "MIT",
    "dependencies": {
      "object-assign": "^4.1.1"
    },
    "peerDependencies": {
      "react": "^16.8.0 || ^17.0.0"
    },
    "devDependencies": {
      "rxjs": "^5.5.6"
    },
    "_registry": "npm",
    "_loc": "/home/mihai012/.cache/yarn/v6/npm-use-subscription-1.5.1-73501107f02fad84c6dd57965beb0b75c68c42d1-integrity/node_modules/use-subscription/package.json",
    "readmeFilename": "README.md",
    "readme": "# use-subscription\n\nReact hook that safely manages subscriptions in concurrent mode.\n\nThis utility can be used for subscriptions to a single value that are typically only read in one place and may update frequently (e.g. a component that subscribes to a geolocation API to show a dot on a map).\n\n## When should you NOT use this?\n\nMost other cases have **better long-term solutions**:\n* Redux/Flux stores should use the [context API](https://reactjs.org/docs/context.html) instead.\n* I/O subscriptions (e.g. notifications) that update infrequently should use a mechanism like [`react-cache`](https://github.com/facebook/react/blob/master/packages/react-cache/README.md) instead.\n* Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced [here](https://gist.github.com/bvaughn/d569177d70b50b58bff69c3c4a5353f3)) in a way that is most optimized for their library usage.\n\n## Limitations in concurrent mode\n\n`use-subscription` is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering. This is an inherent limitation of storing state outside of React's managed state queue and rendering in response to a change event.\n\nThe effect of de-opting to sync mode is that the main thread may periodically be blocked (in the case of CPU-bound work), and placeholders may appear earlier than desired (in the case of IO-bound work).\n\nFor **full compatibility** with concurrent rendering, including both **time-slicing** and **React Suspense**, the suggested longer-term solution is to move to one of the patterns described in the previous section.\n\n## What types of subscriptions can this support?\n\nThis abstraction can handle a variety of subscription types, including:\n* Event dispatchers like `HTMLInputElement`.\n* Custom pub/sub components like Relay's `FragmentSpecResolver`.\n* Observable types like RxJS `BehaviorSubject` and `ReplaySubject`. (Types like RxJS `Subject` or `Observable` are not supported, because they provide no way to read the \"current\" value after it has been emitted.)\n\nNote that JavaScript promises are also **not supported** because they provide no way to synchronously read the \"current\" value.\n\n# Installation\n\n```sh\n# Yarn\nyarn add use-subscription\n\n# NPM\nnpm install use-subscription\n```\n\n# Usage\n\nTo configure a subscription, you must provide two methods: `getCurrentValue` and `subscribe`.\n\nIn order to avoid removing and re-adding subscriptions each time this hook is called, the parameters passed to this hook should be memoized. This can be done by wrapping the entire subscription with `useMemo()`, or by wrapping the individual callbacks with `useCallback()`.\n\n## Subscribing to event dispatchers\n\nBelow is an example showing how `use-subscription` can be used to subscribe to event dispatchers such as DOM elements.\n\n```js\nimport React, { useMemo } from \"react\";\nimport { useSubscription } from \"use-subscription\";\n\n// In this example, \"input\" is an event dispatcher (e.g. an HTMLInputElement)\n// but it could be anything that emits an event and has a readable current value.\nfunction Example({ input }) {\n\n  // Memoize to avoid removing and re-adding subscriptions each time this hook is called.\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => input.value,\n      subscribe: callback => {\n        input.addEventListener(\"change\", callback);\n        return () => input.removeEventListener(\"change\", callback);\n      }\n    }),\n\n    // Re-subscribe any time our input changes\n    // (e.g. we get a new HTMLInputElement prop to subscribe to)\n    [input]\n  );\n\n  // The value returned by this hook reflects the input's current value.\n  // Our component will automatically be re-rendered when that value changes.\n  const value = useSubscription(subscription);\n\n  // Your rendered output goes here ...\n}\n```\n\n## Subscribing to observables\n\nBelow are examples showing how `use-subscription` can be used to subscribe to certain types of observables (e.g. RxJS `BehaviorSubject` and `ReplaySubject`).\n\n**Note** that it is not possible to support all observable types (e.g. RxJS `Subject` or `Observable`) because some provide no way to read the \"current\" value after it has been emitted.\n\n### `BehaviorSubject`\n```js\nconst subscription = useMemo(\n  () => ({\n    getCurrentValue: () => behaviorSubject.getValue(),\n    subscribe: callback => {\n      const subscription = behaviorSubject.subscribe(callback);\n      return () => subscription.unsubscribe();\n    }\n  }),\n\n  // Re-subscribe any time the behaviorSubject changes\n  [behaviorSubject]\n);\n\nconst value = useSubscription(subscription);\n```\n\n### `ReplaySubject`\n```js\nconst subscription = useMemo(\n  () => ({\n    getCurrentValue: () => {\n      let currentValue;\n      // ReplaySubject does not have a sync data getter,\n      // So we need to temporarily subscribe to retrieve the most recent value.\n      replaySubject\n        .subscribe(value => {\n          currentValue = value;\n        })\n        .unsubscribe();\n      return currentValue;\n    },\n    subscribe: callback => {\n      const subscription = replaySubject.subscribe(callback);\n      return () => subscription.unsubscribe();\n    }\n  }),\n\n  // Re-subscribe any time the replaySubject changes\n  [replaySubject]\n);\n\nconst value = useSubscription(subscription);\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) Facebook, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/use-subscription/-/use-subscription-1.5.1.tgz#73501107f02fad84c6dd57965beb0b75c68c42d1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/use-subscription/-/use-subscription-1.5.1.tgz",
    "hash": "73501107f02fad84c6dd57965beb0b75c68c42d1",
    "integrity": "sha512-Xv2a1P/yReAjAbhylMfFplFKj9GssgTwN7RlcTxBujFQcloStWNDQdc4g4NRWH9xS4i/FDk04vQBptAXoF3VcA==",
    "registry": "npm",
    "packageName": "use-subscription",
    "cacheIntegrity": "sha512-Xv2a1P/yReAjAbhylMfFplFKj9GssgTwN7RlcTxBujFQcloStWNDQdc4g4NRWH9xS4i/FDk04vQBptAXoF3VcA== sha1-c1ARB/AvrYTG3VeWW+sLdcaMQtE="
  },
  "registry": "npm",
  "hash": "73501107f02fad84c6dd57965beb0b75c68c42d1"
}