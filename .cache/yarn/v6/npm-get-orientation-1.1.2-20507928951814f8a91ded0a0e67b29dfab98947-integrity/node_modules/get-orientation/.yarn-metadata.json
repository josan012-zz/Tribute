{
  "manifest": {
    "name": "get-orientation",
    "version": "1.1.2",
    "description": "Get orientation from image file",
    "main": "index.js",
    "types": "index.d.ts",
    "browser": "browser.js",
    "dependencies": {
      "stream-parser": "^0.3.1"
    },
    "devDependencies": {
      "@types/chai": "4.2.3",
      "@types/debug": "4.1.5",
      "@types/mocha": "5.2.7",
      "@types/node": "8.10.54",
      "@types/selenium-webdriver": "4.0.3",
      "@vingle/commitlint-preset": "1.0.3",
      "@vingle/semantic-release-config": "1.0.3",
      "@vingle/tslint-preset": "1.0.0",
      "browserstack-local": "1.4.2",
      "chai": "4.2.0",
      "husky": "3.0.7",
      "intern": "4.4.3",
      "mocha": "6.2.1",
      "rollup": "1.22.0",
      "rollup-plugin-typescript2": "0.24.3",
      "selenium-webdriver": "4.0.0-alpha.5",
      "ts-node": "8.4.1",
      "tslint": "5.20.0",
      "typescript": "3.6.3"
    },
    "scripts": {
      "clean": "ls *.d.ts *.js *.map | grep -E '(index|base|stream-parser|browser)' | xargs rm -f",
      "build": "npm run clean && tsc && rollup -c rollup.config.js && rollup -c rollup.config.es5.js && cp browser.d.ts browser.es5.d.ts",
      "prepublishOnly": "npm run build",
      "pretest": "npm run clean && npm run build && npm run seed",
      "test": "npm run test:node && npm run test:browser",
      "seed": "test -e fixtures/exif-examples || git clone https://github.com/ianare/exif-samples.git fixtures/exif-examples --depth=1",
      "test:node": "mocha -r ts-node/register index.spec.ts",
      "test:browser": "intern",
      "test:browserstack": "mocha -t 3600000 -r ts-node/register test.e2e.browserstack.ts",
      "posttest": "npm run clean",
      "lint": "tslint -c tslint.json '*.ts'"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mooyoul/get-orientation.git"
    },
    "keywords": [
      "image",
      "exif",
      "jpeg",
      "jpg",
      "tiff",
      "image-orientation",
      "orientation"
    ],
    "author": {
      "name": "MooYeol Prescott Lee",
      "email": "mooyoul@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mooyoul/get-orientation/issues"
    },
    "homepage": "https://github.com/mooyoul/get-orientation#readme",
    "config": {
      "commitizen": {
        "path": "cz-conventional-changelog"
      }
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "commitlint": {
      "extends": [
        "@vingle/commitlint-preset"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/mihai012/.cache/yarn/v6/npm-get-orientation-1.1.2-20507928951814f8a91ded0a0e67b29dfab98947-integrity/node_modules/get-orientation/package.json",
    "readmeFilename": "README.md",
    "readme": "# get-orientation\n\n[![Build Status](https://travis-ci.com/mooyoul/get-orientation.svg?branch=master)](https://travis-ci.com/mooyoul/get-orientation)\n[![Semantic Release enabled](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n![npm bundle size (minified)](https://img.shields.io/bundlephobia/min/get-orientation.svg)\n[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com/)\n[![MIT license](http://img.shields.io/badge/license-MIT-blue.svg)](http://mooyoul.mit-license.org/)\n\nGet orientation from EXIF of image file. Supports both Browser and Server (Node.js) environment.\n\n`get-orientation` has fast, efficient built-in EXIF parser. \nBuilt-in EXIF Parser is stream-based, and uses small memory footprint.\n\nAlso, Compatibility is the key. `get-orientation` was tested with 50+ test images.\n\n## Sponsor\n\n- [Vingle](https://www.vingle.net) - Vingle, Very Community. Love the things that you love. - [We're hiring!](https://careers.vingle.net/#/engineering/backend)\n\n## Demo\n\nhttps://mooyoul.github.io/get-orientation/\n\n## Why?\n\n![adaption stats of CSS3 Image Orientation](/docs/why-2.png)\n\nMost Browsers don't rotate images automatically.\n\nHmm... How about adaption stats of CSS3 Image Orientation?\n\n![missing auto rotation](/docs/why-1.png)\n\nWell. Good luck. \n\nTo rotate image by its orientation, you'll have to make a EXIF parser or install heavy EXIF related libraries.\n\nThat's why i made this.           \n\n## Compatibility\n\nget-orientation works in major environments, including IE 10.\n\n#### Tested Platforms (Node.js) \n\nPlatform | Environment | Build | Compatibility \n-------- | ----------- | ----- | -------------\nmacOS Mojave | Node.js 4 | Default | Compatible\nmacOS Mojave | Node.js 6 | Default | Compatible\nLinux Ubuntu Trusty | Node.js 6 | Default | Compatible\nmacOS Mojave | Node.js 8 | Default | Compatible\nLinux Ubuntu Trusty | Node.js 10 | Default | Compatible\nmacOS Mojave | Node.js 10 | Default | Compatible\n\n#### Tested Platforms (Browser)\n\nPlatform | Environment | Build | Compatibility\n-------- | ----------- | ----- | -------------\nWindows XP/7 | ~ IE 9 | N/A | Incompatible due to missing FileReader/DataView support   \nWindows 7 | IE 10 | Browser/ES5 | Compatible, Requires Promise and WeakMap polyfill\nWindows 7| IE 11 | Browser/ES5 | Compatible, Requires Promise polyfill\nWindows 10 | IE 11 | Browser/ES5 | Compatible, Requires Promise polyfill\nmacOS Mojave | Chrome 74 | Browser/ES6 (Default) | Compatible\nmacOS Mojave | Safari | Browser/ES6 (Default) | Compatible\nmacOS Mojave | Safari TP | Browser/ES6 (Default) | Compatible\nmacOS Mojave | Firefox Developer Edition 67 | Browser/ES6 (Default) | Compatible\nmacOS Mojave | Firefox 65 | Browser/ES6 (Default) | Compatible\niOS 12.0.1 | Safari | Browser/ES6 (Default) | Compatible\nAndroid 5 | Mobile Chrome 74 | Browser/ES6 (Default) | Compatible\n\n\n## Install\n\n#### from NPM\n\n```bash\n$ npm install get-orientation\n```\n\n#### from unpkg\n\n```html\n<!-- ES6 Target Build (default) -->\n<script type=\"text/javascript\" src=\"https://unpkg.com/get-orientation/browser\"></script>\n\n<!-- ES5 Target Build (for Compat, requires Promise, WeakMap polyfill -->\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.6.5/core.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://unpkg.com/get-orientation/browser.es5\"></script>\n```\n\n\n## Supported Image Format\n\n- JPEG/JFIF\n- JPEG/EXIF\n- TIFF/EXIF\n    \n \n## Usage\n\n#### Node.js\n\n```typescript\n\nimport * as fs from \"fs\";\nimport { getOrientation } from \"get-orientation\";\n\n// using Readable File Stream as input\nconst stream = fs.createReadStream(imageFilePath);\nconst orientation = await getOrientation(stream);\n\n// using Buffer as input\nconst bufFile = fs.readFileSync(imageFilePath);\nconst orientation = await getOrientation(bufFile);\n\n// using HTTP Response body as input\nimport axios from \"axios\";\nconst response = await axios({ url, responseType: \"stream\" });\nconst orientation = await getOrientation(response.data);\n\n\n// using Stream interface directly\nimport { EXIFOrientationParser, Orientation } from \"get-orientation\";\n\nconst parser = new EXIFOrientationParser();\nparser.on(\"orientation\", (orientation: Orientation) => {\n  console.log(\"got orientation: \", orientation);\n});\n\nfs.createReadStream(imageFilePath).pipe(parser);\n```\n\n#### Browser\n\n```javascript\nimport { getOrientation } from \"get-orientation/browser\";\n\nasync function onFileChanged() {\n  const orientation = await getOrientation(fileInput.files[0]);\n  // do stuff...\n}\n```\n\n> *IMPORTANT NOTE*\n>\n> The ES5 target browser build does not include any Polyfills like Promise/A+.\n> For example, To use this library from Microsoft Internet Explorer 11, You'll have to polyfill Promise.\n\n \n## API (Node.js)\n\n### `getOrientation(input: Buffer | ReadableStream)` => `Promise<Orientation>`\n\nreturns Orientation of given image.\n\nIf image is non-jpeg image, or non-image, `getOrientation` will return Orientation.TOP_LEFT (Horizontal - Default value).  \n\n### `new EXIFOrientationParser()` => `WritableStream`\n\nreturns a parser stream instance that implements WritableStream interface.\n\nPlease note that EXIFOrientationParser won't emit any `orientation` event if stream doesn't have any Orientation tags.\nalso, Stream will be closed without any errors.\n\nFor example, Using non-EXIF images, non-JPEG images as input won't emit a `orientation` event.     \n\n#### Stream Events\n\n##### `orientation`\n\nemitted after parsing orientation.\n\n\n## API (Browser)\n\n### `getOrientation(input: ArrayBuffer | Blob | File)` => `Promise<Orientation>` \n\nreturns Orientation of given image.\n\nIf image is non-jpeg image, or non-image, `getOrientation` will return Orientation.TOP_LEFT (Horizontal - Default value).\n\n## Types\n\n### Orientation\n\n```typescript\nenum Orientation {\n  TOP_LEFT = 1,         // Horizontal (Default)\n  TOP_RIGHT = 2,        // Mirror Horizontal\n  BOTTOM_RIGHT  = 3,    // Rotate 180\n  BOTTOM_LEFT = 4,      // Mirror vertical\n  LEFT_TOP = 5,         // Mirror horizontal and rotate 270 CW\n  RIGHT_TOP = 6,        // Rotate 90 CW\n  RIGHT_BOTTOM = 7,     // Mirror horizontal and rotate 90 CW\n  LEFT_BOTTOM = 8,      // Rotate 270 CW\n}\n```\n\n\n## Changelog\n\nSee [CHANGELOG](/CHANGELOG.md).\n\n\n## Testing\n\n```bash\n$ npm run test\n```\n\n\n## Build\n\n```bash\n$ npm run build\n```\n\n## Related\n\n- [mooyoul/node-webpinfo](https://github.com/mooyoul/node-webpinfo) - Strongly typed, Stream based WebP Container Parser\n\n## License\n[MIT](LICENSE)\n\nSee full license on [mooyoul.mit-license.org](http://mooyoul.mit-license.org/)\n",
    "licenseText": "\nThe MIT License (MIT)\nCopyright © 2019 MooYeol Prescott Lee, http://debug.so <mooyoul@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/get-orientation/-/get-orientation-1.1.2.tgz#20507928951814f8a91ded0a0e67b29dfab98947",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/get-orientation/-/get-orientation-1.1.2.tgz",
    "hash": "20507928951814f8a91ded0a0e67b29dfab98947",
    "integrity": "sha512-/pViTfifW+gBbh/RnlFYHINvELT9Znt+SYyDKAUL6uV6By019AK/s+i9XP4jSwq7lwP38Fd8HVeTxym3+hkwmQ==",
    "registry": "npm",
    "packageName": "get-orientation",
    "cacheIntegrity": "sha512-/pViTfifW+gBbh/RnlFYHINvELT9Znt+SYyDKAUL6uV6By019AK/s+i9XP4jSwq7lwP38Fd8HVeTxym3+hkwmQ== sha1-IFB5KJUYFPipHe0KDmeynfq5iUc="
  },
  "registry": "npm",
  "hash": "20507928951814f8a91ded0a0e67b29dfab98947"
}