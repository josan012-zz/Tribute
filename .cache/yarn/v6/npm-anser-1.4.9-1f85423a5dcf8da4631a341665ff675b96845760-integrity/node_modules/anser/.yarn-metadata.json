{
  "manifest": {
    "name": "anser",
    "version": "1.4.9",
    "description": "A low level parser for ANSI sequences.",
    "keywords": [
      "ansi",
      "html"
    ],
    "author": {
      "name": "Ionică Bizău",
      "email": "bizauionica@gmail.com",
      "url": "https://ionicabizau.net"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "repository": {
      "type": "git",
      "url": "git://github.com/IonicaBizau/anser.git"
    },
    "bugs": {
      "url": "http://github.com/IonicaBizau/anser/issues"
    },
    "scripts": {
      "test": "mocha"
    },
    "devDependencies": {
      "mocha": "*",
      "should": "*",
      "jshint": "*",
      "jslint": "*"
    },
    "homepage": "https://github.com/IonicaBizau/anser#readme",
    "blah": {
      "description": [
        {
          "h2": ":rocket: Features"
        },
        {
          "ul": [
            "Converts text containing [ANSI color escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors) into equivalent HTML elements.",
            "Allows converting the input into JSON output.",
            "HTML escaping",
            "Converts links into HTML elements",
            "Friendly APIs to use with  virtual dom libraries"
          ]
        }
      ],
      "example": [
        "When using **TypeScript** you can do the following:",
        {
          "code": {
            "content": [
              "import * as Anser from 'anser';",
              "const txt = \"\\u001b[38;5;196mHello\\u001b[39m \\u001b[48;5;226mWorld\\u001b[49m\";",
              "console.log(Anser.ansiToHtml(txt));",
              "// <span style=\"color:rgb(255, 0, 0)\">Hello</span> <span style=\"background-color:rgb(255, 255, 0)\">World</span>"
            ],
            "language": "ts"
          }
        }
      ],
      "thanks": "This project is highly based on [`ansi_up`](https://github.com/drudru/ansi_up), by [@drudru](https://github.com/drudru/). Thanks! :cake:"
    },
    "license": "MIT",
    "dependencies": {},
    "files": [
      "bin/",
      "app/",
      "lib/",
      "dist/",
      "src/",
      "scripts/",
      "resources/",
      "menu/",
      "cli.js",
      "index.js",
      "bloggify.js",
      "bloggify.json",
      "bloggify/"
    ],
    "_registry": "npm",
    "_loc": "/home/mihai012/.cache/yarn/v6/npm-anser-1.4.9-1f85423a5dcf8da4631a341665ff675b96845760-integrity/node_modules/anser/package.json",
    "readmeFilename": "README.md",
    "readme": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# anser\n\nA low level parser for ANSI sequences.\n\n\n\n\n## Installation\n\n```sh\n$ npm i anser\n```\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n```js\n\"use strict\";\n\nconst Anser = require(\"anser\");\n\nconst txt = \"\\u001b[38;5;196mHello\\u001b[39m \\u001b[48;5;226mWorld\\u001b[49m\";\n\nconsole.log(Anser.ansiToHtml(txt));\n// <span style=\"color:rgb(255, 0, 0)\">Hello</span> <span style=\"background-color:rgb(255, 255, 0)\">World</span>\n\nconsole.log(Anser.ansiToHtml(txt, { use_classes: true }));\n// <span class=\"ansi-palette-196-fg\">Hello</span> <span class=\"ansi-palette-226-bg\">World</span>\n\nconsole.log(Anser.ansiToJson(txt));\n// [ { content: '',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: undefined,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] },\n//   { content: 'Hello',\n//     fg: '255, 0, 0',\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: true,\n//     isEmpty: [Function: isEmpty] },\n//   { content: ' ',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] },\n//   { content: 'World',\n//     fg: null,\n//     bg: '255, 255, 0',\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: true,\n//     isEmpty: [Function: isEmpty] },\n//   { content: '',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] } ]\n\n```\n\n\n\n\n\n\n## Documentation\n\n\n\n\n\n### `Anser.escapeForHtml(txt)`\nEscape the input HTML.\n\nThis does the minimum escaping of text to make it compliant with HTML.\nIn particular, the '&','<', and '>' characters are escaped. This should\nbe run prior to `ansiToHtml`.\n\n#### Params\n- **String** `txt`: The input text (containing the ANSI snippets).\n\n#### Return\n- **String** The escaped html.\n\n### `Anser.linkify(txt)`\nAdds the links in the HTML.\n\nThis replaces any links in the text with anchor tags that display the\nlink. The links should have at least one whitespace character\nsurrounding it. Also, you should apply this after you have run\n`ansiToHtml` on the text.\n\n#### Params\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The HTML containing the <a> tags (unescaped).\n\n### `Anser.ansiToHtml(txt, options)`\nThis replaces ANSI terminal escape codes with SPAN tags that wrap the\ncontent.\n\nThis function only interprets ANSI SGR (Select Graphic Rendition) codes\nthat can be represented in HTML.\nFor example, cursor movement codes are ignored and hidden from output.\nThe default style uses colors that are very close to the prescribed\nstandard. The standard assumes that the text will have a black\nbackground. These colors are set as inline styles on the SPAN tags.\n\nAnother option is to set `use_classes: true` in the options argument.\nThis will instead set classes on the spans so the colors can be set via\nCSS. The class names used are of the format `ansi-*-fg/bg` and\n`ansi-bright-*-fg/bg` where `*` is the color name,\ni.e black/red/green/yellow/blue/magenta/cyan/white.\n\n#### Params\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed to the ansiToHTML method.\n\n#### Return\n- **String** The HTML output.\n\n### `Anser.ansiToJson(txt, options)`\nConverts ANSI input into JSON output.\n\n#### Params\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed to the ansiToHTML method.\n\n#### Return\n- **String** The HTML output.\n\n### `Anser.ansiToText(txt)`\nConverts ANSI input into text output.\n\n#### Params\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The text output.\n\n### `Anser()`\nThe `Anser` class.\n\n#### Return\n- **Anser**\n\n### `setupPalette()`\nSets up the palette.\n\n### `escapeForHtml(txt)`\nEscapes the input text.\n\n#### Params\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The escpaed HTML output.\n\n### `linkify(txt)`\nAdds HTML link elements.\n\n#### Params\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The HTML output containing link elements.\n\n### `ansiToHtml(txt, options)`\nConverts ANSI input into HTML output.\n\n#### Params\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed ot the `process` method.\n\n#### Return\n- **String** The HTML output.\n\n### `ansiToJson(txt, options)`\nConverts ANSI input into HTML output.\n\n#### Params\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed ot the `process` method.\n\n#### Return\n- **String** The JSON output.\n\n### `ansiToText(txt)`\nConverts ANSI input into HTML output.\n\n#### Params\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The text output.\n\n### `process(txt, options, markup)`\nProcesses the input.\n\n#### Params\n- **String** `txt`: The input text.\n- **Object** `options`: An object passed to `processChunk` method, extended with:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`:\n\n### `processChunkJson(text, options, markup)`\nProcesses the current chunk into json output.\n\n#### Params\n- **String** `text`: The input text.\n- **Object** `options`: An object containing the following fields:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`: If false, the colors will not be parsed.\n\n#### Return\n- **Object** The result object:\n - `content` (String): The text.\n - `fg` (String|null): The foreground color.\n - `bg` (String|null): The background color.\n - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n\n### `processChunk(text, options, markup)`\nProcesses the current chunk of text.\n\n#### Params\n- **String** `text`: The input text.\n- **Object** `options`: An object containing the following fields:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`: If false, the colors will not be parsed.\n\n#### Return\n- **Object|String** The result (object if `json` is wanted back or string otherwise).\n\n\n\n\n\n\n## How to contribute\nHave an idea? Found a bug? See [how to contribute][contributing].\n\n\n\n## License\nSee the [LICENSE][license] file.\n\n\n[license]: /LICENSE\n[contributing]: /CONTRIBUTING.md\n[docs]: /DOCUMENTATION.md\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2012-19 Ionică Bizău <bizauionica@gmail.com> (https://ionicabizau.net)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/anser/-/anser-1.4.9.tgz#1f85423a5dcf8da4631a341665ff675b96845760",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/anser/-/anser-1.4.9.tgz",
    "hash": "1f85423a5dcf8da4631a341665ff675b96845760",
    "integrity": "sha512-AI+BjTeGt2+WFk4eWcqbQ7snZpDBt8SaLlj0RT2h5xfdWaiy51OjYvqwMrNzJLGy8iOAL6nKDITWO+rd4MkYEA==",
    "registry": "npm",
    "packageName": "anser",
    "cacheIntegrity": "sha512-AI+BjTeGt2+WFk4eWcqbQ7snZpDBt8SaLlj0RT2h5xfdWaiy51OjYvqwMrNzJLGy8iOAL6nKDITWO+rd4MkYEA== sha1-H4VCOl3PjaRjGjQWZf9nW5aEV2A="
  },
  "registry": "npm",
  "hash": "1f85423a5dcf8da4631a341665ff675b96845760"
}